import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.exceptions.TelegramApiException
import ru.rsavin.todoist.bot.BotService
import java.util.Timer
import java.util.TimerTask

class TodoistBot(
    botToken: String,
    private val botService: BotService
) : TelegramLongPollingBot(botToken) {

    @Value("\${bot.allowed-user}")
    private lateinit var allowedUser: String

    @Value("\${todoist.orders-list-id}")
    private lateinit var ordersListId: String

    @Value("\${todoist.tasks-list-id}")
    private lateinit var tasksListId: String

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private val userTasks = mutableMapOf<Long, UserTaskData>()

    override fun onUpdateReceived(update: Update) {
        if (update.hasMessage()) {
            val message = update.message
            val chatId = message.chatId
            val username = message.from.userName

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (allowedUser != username) {
                sendMessage(chatId, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
                return
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            handleUserMessage(chatId, message.text)
        }
    }

    private fun handleUserMessage(chatId: Long, text: String?) {
        val taskData = userTasks.getOrPut(chatId) { UserTaskData() }

        // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
        taskData.timer?.cancel()
        taskData.timer = Timer()

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
        taskData.timer?.schedule(object : TimerTask() {
            override fun run() {
                createTaskFromUserData(chatId, taskData)
                userTasks.remove(chatId) // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            }
        }, 5000) // 5 —Å–µ–∫—É–Ω–¥

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
        if (taskData.title == null) {
            taskData.title = text
        } else {
            taskData.description.appendLine(text)
        }
    }

    private fun createTaskFromUserData(chatId: Long, taskData: UserTaskData) {
        if (taskData.title != null) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Todoist
            val listId = if (botService.isMarketplaceLink(taskData.title!!)) ordersListId else tasksListId
            val isTaskCreated = botService.createTodoistTask(
                taskData.title!!,
                taskData.description.toString(),
                listId
            )

            if (isTaskCreated) {
                sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            } else {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
            }
        } else {
            sendMessage(chatId, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
        }
    }

    private fun sendMessage(chatId: Long, text: String) {
        val message = SendMessage(chatId.toString(), text)
        try {
            execute(message)
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }

    override fun getBotUsername(): String {
        return "TodoistBot"
    }
}

data class UserTaskData(
    var title: String? = null,
    var description: StringBuilder = StringBuilder(),
    var timer: Timer? = null
)